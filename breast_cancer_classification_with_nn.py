# -*- coding: utf-8 -*-
"""Breast_Cancer_Classification_with_NN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vPLjUADf1yuA_TRZ8hRmCjx3vUKg1weN
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import sklearn.datasets
from sklearn.model_selection import train_test_split

dataset = sklearn.datasets.load_breast_cancer()

dataset

df = pd.DataFrame(dataset.data, columns = dataset.feature_names)
df.head()

df['label'] = dataset.target

df.tail()

df.shape

df.info()

df.isnull().sum()

df.describe()

df['label'].value_counts()
# 0 - malignant
# 1 - benign

df.groupby('label').mean()

x = df.drop(columns = 'label' , axis=1)
y = df['label']

x_train , x_test , y_train, y_test = train_test_split(x , y , test_size = 0.2 , random_state = 42)

print(x.shape)
print(x_train.shape)
print(x_test.shape)

from sklearn.preprocessing import StandardScaler

sc = StandardScaler()
x_train_std = sc.fit_transform(x_train)
x_test_std = sc.fit_transform(x_test)

import tensorflow as tf
from tensorflow import keras

tf.random.set_seed(3)

model = keras.Sequential([keras.layers.Flatten(input_shape=(30,)),
                          keras.layers.Dense(20 , activation = 'relu'),
                          keras.layers.Dense(2 , activation = 'sigmoid')])

model.compile(optimizer = 'adam' ,
              loss = 'sparse_categorical_crossentropy',
              metrics = ['accuracy'])

history = model.fit(x_train_std , y_train , validation_split = 0.1 , epochs = 10)

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])

plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')

plt.legend(['training data' , 'validatio  data' ] , loc = 'lower right')

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])

plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')

plt.legend(['training data', 'validation data'], loc = 'upper right')

loss , accuracy = model.evaluate(x_test_std , y_test)
print(accuracy)

y_pred = model.predict(x_test_std)

y_pred.shape

print(y_pred[0])
# model.predict() gives the prediction probability of each class for that data point

my_list = [0.25 , 0.65]
index_max_value = np.argmax(my_list)
print(my_list)
print(index_max_value)

y_pred_labels = [np.argmax(i) for i in y_pred]
print(y_pred_labels)

input_data = (11.76,21.6,74.72,427.9,0.08637,0.04966,0.01657,0.01115,0.1495,0.05888,0.4062,1.21,2.635,28.47,0.005857,0.009758,0.01168,0.007445,0.02406,0.001769,12.98,25.72,82.98,516.5,0.1085,0.08615,0.05523,0.03715,0.2433,0.06563)

input_data_as_numpy_array = np.asarray(input_data)

input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

input_data_std = sc.transform(input_data_reshaped)

prediction = model.predict(input_data_std)
print(prediction)

prediction_label = [np.argmax(prediction)]
print(prediction_label)

if(prediction_label[0] == 0):
  print('The tumor is Malignant')

else:
  print('The tumor is Benign')

